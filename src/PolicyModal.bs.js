// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactModal = require("react-modal");
var Utils$OurPolitics = require("./Utils.bs.js");
var Strings$OurPolitics = require("./Strings.bs.js");
var LanguageContext$OurPolitics = require("./LanguageContext.bs.js");
var PolicyModalDispatch$OurPolitics = require("./PolicyModalDispatch.bs.js");

var Modal = /* module */[];

function PolicyModal$Reference(Props) {
  var source = Props.source;
  return React.createElement("li", {
              className: "reference"
            }, React.createElement("a", {
                  href: source[/* url */3],
                  target: "_blank"
                }, React.createElement("h2", {
                      className: "reference--title"
                    }, source[/* title */2])), React.createElement("div", {
                  className: "reference--meta"
                }, source[/* publisher */1]));
}

var Reference = /* module */[/* make */PolicyModal$Reference];

function getPartyHexColour(party) {
  switch (party) {
    case 0 : 
        return "rgba(215,25,32,0.8)";
    case 1 : 
        return "rgba(26,71,130,0.8)";
    case 2 : 
        return "rgba(243,112,33,0.8)";
    case 3 : 
        return "rgba(255,255,255,0.8)";
    
  }
}

function PolicyModal(Props) {
  var policy = Props.policy;
  var isOpen = Props.isOpen;
  var language = React.useContext(LanguageContext$OurPolitics.ctx);
  var dispatch = React.useContext(PolicyModalDispatch$OurPolitics.ctx);
  var topic_title = Curry._2(Strings$OurPolitics.Topic[/* to_str */1], language, policy[/* topic */0]) + (" - " + Curry._2(Strings$OurPolitics.Party[/* to_str */1], language, policy[/* party */3]));
  var style = {
    overlay: {
      backgroundColor: getPartyHexColour(policy[/* party */3])
    }
  };
  var func = Strings$OurPolitics.$$Text[/* to_str */1];
  var arg = policy[/* details */5];
  return React.createElement(ReactModal, {
              isOpen: isOpen,
              onRequestClose: (function (param) {
                  return Curry._1(dispatch, /* ModalClose */0);
                }),
              children: React.createElement("div", {
                    className: "policyModal"
                  }, React.createElement("div", {
                        className: "modal--content"
                      }, React.createElement("div", {
                            className: "modal--headingContainer"
                          }, React.createElement("div", {
                                className: "modal--headingInfo"
                              }, React.createElement("div", {
                                    className: "modal--topicBox"
                                  }, React.createElement("p", undefined, topic_title)))), React.createElement("h1", {
                            className: "modal--heading modal--heading__primary"
                          }, Curry._2(Strings$OurPolitics.$$Text[/* react_string */2], language, policy[/* summary */2])), React.createElement("div", {
                            className: "modal--details",
                            dangerouslySetInnerHTML: Utils$OurPolitics.dangerousHtml((function (param) {
                                      return Curry._2(func, param, arg);
                                    })(language))
                          })), React.createElement("div", {
                        className: "modal--sidebar"
                      }, React.createElement("a", {
                            className: "modal--close",
                            href: "#",
                            onClick: (function (param) {
                                return Curry._1(dispatch, /* ModalClose */0);
                              })
                          }), React.createElement("h2", {
                            className: "modal--heading modal--heading__secondary"
                          }, "References"), React.createElement("ul", {
                            className: "reference--list"
                          }, $$Array.map((function (ref) {
                                  return React.createElement(PolicyModal$Reference, {
                                              source: ref
                                            });
                                }), policy[/* references */4])))),
              style: style,
              className: "policyModal--content"
            });
}

var make = PolicyModal;

exports.Modal = Modal;
exports.Reference = Reference;
exports.getPartyHexColour = getPartyHexColour;
exports.make = make;
/* react Not a pure module */
