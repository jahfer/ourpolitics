// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Strings$OurPolitics = require("./Strings.bs.js");
var PolicyCell$OurPolitics = require("./PolicyCell.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var LanguageContext$OurPolitics = require("./LanguageContext.bs.js");

var compare = Caml_obj.caml_compare;

var PartyMap = $$Map.Make(/* module */[/* compare */compare]);

function PolicyRow(Props) {
  var topic = Props.topic;
  var policies = Props.policies;
  var match = React.useState((function () {
          return $$Array.fold_left((function (policy_map, policy) {
                        var policy_list;
                        try {
                          policy_list = Curry._2(PartyMap[/* find */21], policy[/* party */3], policy_map);
                        }
                        catch (exn){
                          if (exn === Caml_builtin_exceptions.not_found) {
                            policy_list = /* array */[];
                          } else {
                            throw exn;
                          }
                        }
                        return Curry._3(PartyMap[/* add */3], policy[/* party */3], $$Array.append(policy_list, /* array */[policy]), policy_map);
                      }), PartyMap[/* empty */0], policies);
        }));
  var table = match[0];
  var language = React.useContext(LanguageContext$OurPolitics.ctx);
  var t_topic = Curry._1(Strings$OurPolitics.Topic[/* react_string */2], language);
  var find_or_default = function (key, map) {
    var exit = 0;
    var policies;
    try {
      policies = Curry._2(PartyMap[/* find */21], key, map);
      exit = 1;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return undefined;
      } else {
        throw exn;
      }
    }
    if (exit === 1) {
      return Caml_option.some(policies);
    }
    
  };
  return React.createElement("div", {
              className: "policyRow"
            }, React.createElement("div", {
                  className: "policyCells"
                }, React.createElement("div", {
                      className: "policyCell policyTopic"
                    }, React.createElement("h3", {
                          className: "policyTopic--title"
                        }, Curry._1(t_topic, topic))), React.createElement(PolicyCell$OurPolitics.make, {
                      party: /* NDP */2,
                      policies: find_or_default(/* NDP */2, table),
                      key: "NDP " + Curry._2(Strings$OurPolitics.Topic[/* to_str */1], /* EN */0, topic)
                    }), React.createElement(PolicyCell$OurPolitics.make, {
                      party: /* Conservative */1,
                      policies: find_or_default(/* Conservative */1, table),
                      key: "Conservative " + Curry._2(Strings$OurPolitics.Topic[/* to_str */1], /* EN */0, topic)
                    }), React.createElement(PolicyCell$OurPolitics.make, {
                      party: /* Liberal */0,
                      policies: find_or_default(/* Liberal */0, table),
                      key: "Liberal " + Curry._2(Strings$OurPolitics.Topic[/* to_str */1], /* EN */0, topic)
                    })));
}

var make = PolicyRow;

exports.PartyMap = PartyMap;
exports.make = make;
/* PartyMap Not a pure module */
